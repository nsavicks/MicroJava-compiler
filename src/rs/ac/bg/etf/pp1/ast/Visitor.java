// generated with ast extension for cup
// version 0.8
// 3/0/2020 14:11:39


package rs.ac.bg.etf.pp1.ast;

public interface Visitor { 

    public void visit(DeclarationList DeclarationList);
    public void visit(ForInit ForInit);
    public void visit(ClassDeclIdent ClassDeclIdent);
    public void visit(MethodDecl MethodDecl);
    public void visit(Mulop Mulop);
    public void visit(FormParsSingle FormParsSingle);
    public void visit(Relop Relop);
    public void visit(TypeIdentSingle TypeIdentSingle);
    public void visit(DesignatorStatementSingle DesignatorStatementSingle);
    public void visit(Else Else);
    public void visit(StatementList StatementList);
    public void visit(Addop Addop);
    public void visit(ForLoopHeader ForLoopHeader);
    public void visit(ForConditionSingle ForConditionSingle);
    public void visit(Factor Factor);
    public void visit(CondTerm CondTerm);
    public void visit(ElseStatementSingle ElseStatementSingle);
    public void visit(CommaNumConstSingle CommaNumConstSingle);
    public void visit(AbstractMethodDecl AbstractMethodDecl);
    public void visit(Designator Designator);
    public void visit(AbstractClassMethodDeclSingle AbstractClassMethodDeclSingle);
    public void visit(TypeIdentList TypeIdentList);
    public void visit(Term Term);
    public void visit(RetType RetType);
    public void visit(Condition Condition);
    public void visit(ConstDeclList ConstDeclList);
    public void visit(ExprSingle ExprSingle);
    public void visit(ActParsList ActParsList);
    public void visit(MethodDeclTypeIdent MethodDeclTypeIdent);
    public void visit(IfHeader IfHeader);
    public void visit(ConditionSingle ConditionSingle);
    public void visit(ConstLiteral ConstLiteral);
    public void visit(ExtendsSingle ExtendsSingle);
    public void visit(VarDeclList VarDeclList);
    public void visit(Expr Expr);
    public void visit(AbstractMethodDeclList AbstractMethodDeclList);
    public void visit(ActPars ActPars);
    public void visit(VarIdentSingle VarIdentSingle);
    public void visit(ActParsSingle ActParsSingle);
    public void visit(DesignatorStatement DesignatorStatement);
    public void visit(ForStep ForStep);
    public void visit(SubSingle SubSingle);
    public void visit(ClassMethodDeclSingle ClassMethodDeclSingle);
    public void visit(Statement Statement);
    public void visit(VarDecl VarDecl);
    public void visit(AbstractMethodDeclItem AbstractMethodDeclItem);
    public void visit(VarIdentList VarIdentList);
    public void visit(SquareSingle SquareSingle);
    public void visit(CondFact CondFact);
    public void visit(Declaration Declaration);
    public void visit(MethodDeclList MethodDeclList);
    public void visit(ActParsExpr ActParsExpr);
    public void visit(DesignatorAssignItem DesignatorAssignItem);
    public void visit(ModopNode ModopNode);
    public void visit(DivopNode DivopNode);
    public void visit(MulopNode MulopNode);
    public void visit(SubopNode SubopNode);
    public void visit(AddopNode AddopNode);
    public void visit(LesserEqualop LesserEqualop);
    public void visit(Lesserop Lesserop);
    public void visit(GreaterEqualop GreaterEqualop);
    public void visit(Greaterop Greaterop);
    public void visit(NotEqualop NotEqualop);
    public void visit(Equalop Equalop);
    public void visit(Assignop Assignop);
    public void visit(DesignatorArray DesignatorArray);
    public void visit(DesignatorDot DesignatorDot);
    public void visit(DesignatorIdent DesignatorIdent);
    public void visit(NoActParsSingle NoActParsSingle);
    public void visit(ActParsSingleNode ActParsSingleNode);
    public void visit(FactorFuncCallDesignator FactorFuncCallDesignator);
    public void visit(FactorExpr FactorExpr);
    public void visit(FactorNewClass FactorNewClass);
    public void visit(FactorNewArray FactorNewArray);
    public void visit(FactorConstant FactorConstant);
    public void visit(FactorFuncCall FactorFuncCall);
    public void visit(FactorVariable FactorVariable);
    public void visit(TermMul TermMul);
    public void visit(TermFactor TermFactor);
    public void visit(NoSubSingle NoSubSingle);
    public void visit(SubSingleNode SubSingleNode);
    public void visit(ExprAdd ExprAdd);
    public void visit(ExprTerm ExprTerm);
    public void visit(CondFactRelop CondFactRelop);
    public void visit(CondFactExpr CondFactExpr);
    public void visit(CondTermFact CondTermFact);
    public void visit(CondTermAnd CondTermAnd);
    public void visit(ConditionTerm ConditionTerm);
    public void visit(ConditionOr ConditionOr);
    public void visit(ActParsExprNode ActParsExprNode);
    public void visit(ActParsListExpr ActParsListExpr);
    public void visit(ActParsListNode ActParsListNode);
    public void visit(ActParsNode ActParsNode);
    public void visit(ErrorDesignatorAssignItem ErrorDesignatorAssignItem);
    public void visit(DesignatorAssignItemNode DesignatorAssignItemNode);
    public void visit(DesignatorStatementFuncDesignator DesignatorStatementFuncDesignator);
    public void visit(DesignatorStatementAssignNode DesignatorStatementAssignNode);
    public void visit(DesignatorStatementDec DesignatorStatementDec);
    public void visit(DesignatorStatementInc DesignatorStatementInc);
    public void visit(DesignatorStatementFunc DesignatorStatementFunc);
    public void visit(NoDesignatorStatementSingle NoDesignatorStatementSingle);
    public void visit(DesignatorStatementSingleNode DesignatorStatementSingleNode);
    public void visit(ElseNode ElseNode);
    public void visit(NoElseStatementSingle NoElseStatementSingle);
    public void visit(ElseStatementSingleNode ElseStatementSingleNode);
    public void visit(NoExprSingle NoExprSingle);
    public void visit(ExprSingleNode ExprSingleNode);
    public void visit(NoCommaNumConstSingle NoCommaNumConstSingle);
    public void visit(CommaNumConstSingleNode CommaNumConstSingleNode);
    public void visit(NoStatementList NoStatementList);
    public void visit(StatementListNode StatementListNode);
    public void visit(NoConditionSingle NoConditionSingle);
    public void visit(ConditionSingleNode ConditionSingleNode);
    public void visit(ErrorForConditionSingleNode ErrorForConditionSingleNode);
    public void visit(ForConditionSingleNode ForConditionSingleNode);
    public void visit(ForStepNode ForStepNode);
    public void visit(ForInitNode ForInitNode);
    public void visit(ForLoopHeaderNode ForLoopHeaderNode);
    public void visit(IfHeaderNode IfHeaderNode);
    public void visit(StatementStatementList StatementStatementList);
    public void visit(StatementPrint StatementPrint);
    public void visit(StatementRead StatementRead);
    public void visit(StatementReturn StatementReturn);
    public void visit(StatementContinue StatementContinue);
    public void visit(StatementBreak StatementBreak);
    public void visit(StatementFor StatementFor);
    public void visit(StatementIf StatementIf);
    public void visit(StatementDesignator StatementDesignator);
    public void visit(Type Type);
    public void visit(NoSquareSingle NoSquareSingle);
    public void visit(SquareSingleNode SquareSingleNode);
    public void visit(ErrorTypeIdentSingle ErrorTypeIdentSingle);
    public void visit(TypeIdentSingleNode TypeIdentSingleNode);
    public void visit(SingleTypeIdentList SingleTypeIdentList);
    public void visit(TypeIdentListNode TypeIdentListNode);
    public void visit(FormPars FormPars);
    public void visit(RetTypeVoid RetTypeVoid);
    public void visit(RetTypeNode RetTypeNode);
    public void visit(NoFormParsSingle NoFormParsSingle);
    public void visit(FormParsSingleNode FormParsSingleNode);
    public void visit(ErrorAbstractMethodDecl ErrorAbstractMethodDecl);
    public void visit(AbstractMethodDeclNode AbstractMethodDeclNode);
    public void visit(NoVarDeclList NoVarDeclList);
    public void visit(VarDeclListNode VarDeclListNode);
    public void visit(MethodDeclTypeIdentNode MethodDeclTypeIdentNode);
    public void visit(MethodDeclPrototype MethodDeclPrototype);
    public void visit(MethodDeclNode MethodDeclNode);
    public void visit(ErrorExtendsSingle ErrorExtendsSingle);
    public void visit(NoExtendsSingle NoExtendsSingle);
    public void visit(ExtendsSingleNode ExtendsSingleNode);
    public void visit(ErrorClassDeclIdent ErrorClassDeclIdent);
    public void visit(ClassDeclIdentNode ClassDeclIdentNode);
    public void visit(AbstractMethodDeclItemNode AbstractMethodDeclItemNode);
    public void visit(MethodDeclItemNode MethodDeclItemNode);
    public void visit(NoAbstractMethodDeclList NoAbstractMethodDeclList);
    public void visit(AbstractMethodDeclListNode AbstractMethodDeclListNode);
    public void visit(NoAbstractClassMethodSingle NoAbstractClassMethodSingle);
    public void visit(AbstractClassMethodDeclSingleNode AbstractClassMethodDeclSingleNode);
    public void visit(AbstractClassDecl AbstractClassDecl);
    public void visit(NoMethodDeclList NoMethodDeclList);
    public void visit(MethodDeclListNode MethodDeclListNode);
    public void visit(NoClassMethodDeclSingle NoClassMethodDeclSingle);
    public void visit(ClassMethodDeclSingleNode ClassMethodDeclSingleNode);
    public void visit(ClassDeclSignature ClassDeclSignature);
    public void visit(ClassDecl ClassDecl);
    public void visit(ErrorVarIdentSingle ErrorVarIdentSingle);
    public void visit(VarIdentSingleNode VarIdentSingleNode);
    public void visit(VarIdentListSingle VarIdentListSingle);
    public void visit(VarIdentListNode VarIdentListNode);
    public void visit(VarType VarType);
    public void visit(ErrorVarDecl ErrorVarDecl);
    public void visit(VarDeclNode VarDeclNode);
    public void visit(ConstLiteralBool ConstLiteralBool);
    public void visit(ConstLiteralChar ConstLiteralChar);
    public void visit(ConstLiteralNum ConstLiteralNum);
    public void visit(ConstDeclListItem ConstDeclListItem);
    public void visit(ConstDeclListSingle ConstDeclListSingle);
    public void visit(ConstDeclListNode ConstDeclListNode);
    public void visit(ConstType ConstType);
    public void visit(ConstDecl ConstDecl);
    public void visit(ClassDeclaration ClassDeclaration);
    public void visit(AbstractClassDeclaration AbstractClassDeclaration);
    public void visit(VarDeclaration VarDeclaration);
    public void visit(ConstDeclaration ConstDeclaration);
    public void visit(NoDeclarationList NoDeclarationList);
    public void visit(DeclarationListNode DeclarationListNode);
    public void visit(ProgName ProgName);
    public void visit(Program Program);

}
