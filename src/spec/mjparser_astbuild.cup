package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

    public int error_sync_size()
    {
        return 1;
    }

    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

// Terminals

terminal PROGRAM, BREAK, CLASS, ABSTRACT, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, FOR, EXT, CONTINUE, PLUS, SUB, MUL, DIV, MOD, EQ, NEQ, GE, GEQ, LE, LEQ, AND, OR, ASSIGN, INC, DEC, SEMI, COMMA, DOT, LPAREN, RPAREN, LSQUARE, RSQUARE, LBRACE, RBRACE;
terminal Boolean BOOL;
terminal Integer NUMBER;
terminal String IDENT;
terminal Character CHAR;

// Non Terminals


nonterminal Mulop Mulop;
nonterminal Addop Addop;
nonterminal Relop Relop;
nonterminal Assignop Assignop;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator;

nonterminal ActParsSingle ActParsSingle;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Term;

nonterminal SubSingle SubSingle;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr;

nonterminal CondFact CondFact;
nonterminal CondTermItem CondTermItem;
nonterminal CondTermList CondTermList;
nonterminal CondTerm CondTerm;
nonterminal ConditionList ConditionList;
nonterminal ConditionSingle ConditionSingle;
nonterminal ForConditionSingle ForConditionSingle;
nonterminal Condition Condition;

nonterminal ActParsList ActParsList;
nonterminal ActPars ActPars;

nonterminal DesignatorAssignItem DesignatorAssignItem;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal DesignatorStatementSingle DesignatorStatementSingle;

nonterminal ElseStatementSingle ElseStatementSingle;
nonterminal ExprSingle ExprSingle;
nonterminal CommaNumConstSingle CommaNumConstSingle;
nonterminal StatementList StatementList;
nonterminal Statement Statement;

nonterminal SquareSingle SquareSingle;
nonterminal TypeIdentSingle TypeIdentSingle;
nonterminal TypeIdentList TypeIdentList;
nonterminal FormPars FormPars;
nonterminal RetType RetType;
nonterminal FormParsSingle FormParsSingle;
nonterminal AbstractMethodDecl AbstractMethodDecl;
nonterminal VarDeclList VarDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal ExtendsSingle ExtendsSingle;
nonterminal AbstractMethodDeclItem AbstractMethodDeclItem;
nonterminal AbstractMethodDeclList AbstractMethodDeclList;
nonterminal AbstractClassMethodDeclSingle AbstractClassMethodDeclSingle;
nonterminal AbstractClassDecl AbstractClassDecl;
nonterminal MethodDeclList MethodDeclList;
nonterminal VarType VarType;
nonterminal VarIdentList VarIdentList;
nonterminal VarIdentSingle VarIdentSingle;
nonterminal VarDecl VarDecl;
nonterminal ConstDeclListItem ConstDeclListItem;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstType ConstType;
nonterminal ConstDecl ConstDecl;
nonterminal Declaration Declaration;
nonterminal DeclarationList DeclarationList;


nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;

nonterminal rs.etf.pp1.symboltable.concepts.Struct ConstLiteral;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ClassDeclSignature;

nonterminal ClassMethodDeclSingle ClassMethodDeclSingle;
nonterminal ClassDeclIdent ClassDeclIdent;
nonterminal ClassDecl ClassDecl;

precedence left ELSE;

// Smene

Program ::= (Program) ProgName:P1 DeclarationList:D2 LBRACE MethodDeclList:M3 RBRACE {: RESULT=new Program(P1, D2, M3); RESULT.setLine(P1left); :};

ProgName ::= (ProgName) PROGRAM IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

DeclarationList ::= (DeclarationListNode) DeclarationList:D1 Declaration:D2 {: RESULT=new DeclarationListNode(D1, D2); RESULT.setLine(D1left); :}
                    |
                    (NoDeclarationList) {: RESULT=new NoDeclarationList(); :} /* epsilon */;

Declaration ::= (ConstDeclaration) ConstDecl:C1 {: RESULT=new ConstDeclaration(C1); RESULT.setLine(C1left); :}
                |
                (VarDeclaration) VarDecl:V1 {: RESULT=new VarDeclaration(V1); RESULT.setLine(V1left); :}
                |
                (AbstractClassDeclaration) AbstractClassDecl:A1 {: RESULT=new AbstractClassDeclaration(A1); RESULT.setLine(A1left); :}
                |
                (ClassDeclaration) ClassDecl:C1 {: RESULT=new ClassDeclaration(C1); RESULT.setLine(C1left); :};

ConstDecl ::= (ConstDecl) ConstType:C1 ConstDeclList:C2 SEMI {: RESULT=new ConstDecl(C1, C2); RESULT.setLine(C1left); :};

ConstType ::= (ConstType) CONST Type:T1 {: RESULT=new ConstType(T1); RESULT.setLine(T1left); :};

ConstDeclList ::= (ConstDeclListNode) ConstDeclList:C1 COMMA ConstDeclListItem:C2 {: RESULT=new ConstDeclListNode(C1, C2); RESULT.setLine(C1left); :}
                    |
                    (ConstDeclListSingle) ConstDeclListItem:C1 {: RESULT=new ConstDeclListSingle(C1); RESULT.setLine(C1left); :};

ConstDeclListItem ::= (ConstDeclListItem) IDENT:constName ASSIGN ConstLiteral:C1 {: RESULT=new ConstDeclListItem(constName, C1); RESULT.setLine(constNameleft); :};

ConstLiteral ::= (ConstLiteralNum) NUMBER:value {: RESULT=new ConstLiteralNum(value); RESULT.setLine(valueleft); :}
                |
                (ConstLiteralChar) CHAR:value {: RESULT=new ConstLiteralChar(value); RESULT.setLine(valueleft); :}
                |
                (ConstLiteralBool) BOOL:value {: RESULT=new ConstLiteralBool(value); RESULT.setLine(valueleft); :}
                ;

VarDecl ::= (VarDeclNode) VarType:V1 VarIdentList:V2 SEMI {: RESULT=new VarDeclNode(V1, V2); RESULT.setLine(V1left); :}
            |
            (ErrorVarDecl) error SEMI:l
            {: parser.report_error("Izvrsen oporavak u liniji "+lleft,null); :} {: RESULT=new ErrorVarDecl(); :};

VarType ::= (VarType) Type:T1 {: RESULT=new VarType(T1); RESULT.setLine(T1left); :};

VarIdentList ::= (VarIdentListNode) VarIdentList:V1 COMMA VarIdentSingle:V2 {: RESULT=new VarIdentListNode(V1, V2); RESULT.setLine(V1left); :}
            |
            (VarIdentListSingle) VarIdentSingle:V1 {: RESULT=new VarIdentListSingle(V1); RESULT.setLine(V1left); :};

VarIdentSingle ::= (VarIdentSingleNode) IDENT:varName SquareSingle:S1 {: RESULT=new VarIdentSingleNode(varName, S1); RESULT.setLine(varNameleft); :}
                |
                (ErrorVarIdentSingle) error:l
                {: parser.report_error("Izvrsen oporavak u liniji "+lleft,null); :} {: RESULT=new ErrorVarIdentSingle(); :};

ClassDecl ::= (ClassDecl) ClassDeclSignature:C1 LBRACE VarDeclList:V2 ClassMethodDeclSingle:C3 RBRACE {: RESULT=new ClassDecl(C1, V2, C3); RESULT.setLine(C1left); :};

ClassDeclSignature ::= (ClassDeclSignature) ClassDeclIdent:C1 ExtendsSingle:E2 {: RESULT=new ClassDeclSignature(C1, E2); RESULT.setLine(C1left); :};

ClassMethodDeclSingle ::= (ClassMethodDeclSingleNode) LBRACE MethodDeclList:M1 RBRACE {: RESULT=new ClassMethodDeclSingleNode(M1); RESULT.setLine(M1left); :}
                            |
                            (NoClassMethodDeclSingle) {: RESULT=new NoClassMethodDeclSingle(); :} /* epsilon */;

MethodDeclList ::= (MethodDeclListNode) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclListNode(M1, M2); RESULT.setLine(M1left); :}
                    |
                    (NoMethodDeclList) {: RESULT=new NoMethodDeclList(); :} /* epsilon */;

AbstractClassDecl ::= (AbstractClassDecl) ABSTRACT ClassDeclIdent:C1 ExtendsSingle:E2 LBRACE VarDeclList:V3 AbstractClassMethodDeclSingle:A4 RBRACE {: RESULT=new AbstractClassDecl(C1, E2, V3, A4); RESULT.setLine(C1left); :};

AbstractClassMethodDeclSingle ::= (AbstractClassMethodDeclSingleNode) LBRACE AbstractMethodDeclList:A1 RBRACE {: RESULT=new AbstractClassMethodDeclSingleNode(A1); RESULT.setLine(A1left); :}
                                   |
                                   (NoAbstractClassMethodSingle) {: RESULT=new NoAbstractClassMethodSingle(); :} /* epsilon */;

AbstractMethodDeclList ::= (AbstractMethodDeclListNode) AbstractMethodDeclList:A1 AbstractMethodDeclItem:A2 {: RESULT=new AbstractMethodDeclListNode(A1, A2); RESULT.setLine(A1left); :}
                        |
                        (NoAbstractMethodDeclList) {: RESULT=new NoAbstractMethodDeclList(); :} /* epsilon */;

AbstractMethodDeclItem ::= (MethodDeclItemNode) MethodDecl:M1 {: RESULT=new MethodDeclItemNode(M1); RESULT.setLine(M1left); :}
                            |
                            (AbstractMethodDeclItemNode) AbstractMethodDecl:A1 {: RESULT=new AbstractMethodDeclItemNode(A1); RESULT.setLine(A1left); :};

ClassDeclIdent ::= (ClassDeclIdentNode) CLASS IDENT:className {: RESULT=new ClassDeclIdentNode(className); RESULT.setLine(classNameleft); :}
                    |
                    (ErrorClassDeclIdent) error:l
                    {: parser.report_error("Izvrsen oporavak u liniji "+lleft,null); :} {: RESULT=new ErrorClassDeclIdent(); :};

ExtendsSingle ::= (ExtendsSingleNode) EXT Type:T1 {: RESULT=new ExtendsSingleNode(T1); RESULT.setLine(T1left); :}
                    |
                    (NoExtendsSingle) {: RESULT=new NoExtendsSingle(); :} /* epsilon */
                    |
                    (ErrorExtendsSingle) EXT error:l
                    {: parser.report_error("Izvrsen oporavak u liniji "+lleft,null); :} {: RESULT=new ErrorExtendsSingle(); :};

MethodDecl ::= (MethodDecl) RetType:R1 IDENT:I2 LPAREN FormParsSingle:F3 RPAREN VarDeclList:V4 LBRACE StatementList:S5 RBRACE {: RESULT=new MethodDecl(R1, I2, F3, V4, S5); RESULT.setLine(R1left); :};

VarDeclList ::= (VarDeclListNode) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclListNode(V1, V2); RESULT.setLine(V1left); :}
                |
                (NoVarDeclList) {: RESULT=new NoVarDeclList(); :} /* epsilon */;

AbstractMethodDecl ::= (AbstractMethodDeclNode) ABSTRACT RetType:R1 IDENT:I2 LPAREN FormParsSingle:F3 RPAREN SEMI {: RESULT=new AbstractMethodDeclNode(R1, I2, F3); RESULT.setLine(R1left); :}
                        |
                        (ErrorAbstractMethodDecl) error:l SEMI
                        {: parser.report_error("Izvrsen oporavak u liniji "+lleft,null); :} {: RESULT=new ErrorAbstractMethodDecl(); :};

FormParsSingle ::= (FormParsSingleNode) FormPars:F1 {: RESULT=new FormParsSingleNode(F1); RESULT.setLine(F1left); :}
                    |
                    (NoFormParsSingle) {: RESULT=new NoFormParsSingle(); :} /* epsilon */;

RetType ::= (RetTypeNode) Type:T1 {: RESULT=new RetTypeNode(T1); RESULT.setLine(T1left); :}
            |
            (RetTypeVoid) VOID {: RESULT=new RetTypeVoid(); :};

FormPars ::= (FormPars) TypeIdentList:T1 {: RESULT=new FormPars(T1); RESULT.setLine(T1left); :};

TypeIdentList ::= (TypeIdentListNode) TypeIdentList:T1 COMMA TypeIdentSingle:T2 {: RESULT=new TypeIdentListNode(T1, T2); RESULT.setLine(T1left); :}
                    |
                    (SingleTypeIdentList) TypeIdentSingle:T1 {: RESULT=new SingleTypeIdentList(T1); RESULT.setLine(T1left); :};

TypeIdentSingle ::= (TypeIdentSingleNode) Type:T1 IDENT:I2 SquareSingle:S3 {: RESULT=new TypeIdentSingleNode(T1, I2, S3); RESULT.setLine(T1left); :}
                    |
                    (ErrorTypeIdentSingle) error:l
                    {: parser.report_error("Izvrsen oporavak u liniji "+lleft,null); :} {: RESULT=new ErrorTypeIdentSingle(); :};

SquareSingle ::= (SquareSingleNode) LSQUARE RSQUARE {: RESULT=new SquareSingleNode(); :}
                |
                (NoSquareSingle) {: RESULT=new NoSquareSingle(); :} /* epsilon */;

Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

Statement ::= (StatementDesignator) DesignatorStatement:D1 SEMI {: RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); :}
            |
            (StatementIf) IF LPAREN Condition:C1 RPAREN Statement:S2 ElseStatementSingle:E3 {: RESULT=new StatementIf(C1, S2, E3); RESULT.setLine(C1left); :}
            |
            (StatementFor) FOR LPAREN DesignatorStatementSingle:D1 SEMI ForConditionSingle:F2 DesignatorStatementSingle:D3 RPAREN Statement:S4 {: RESULT=new StatementFor(D1, F2, D3, S4); RESULT.setLine(D1left); :}
            |
            (StatementBreak) BREAK SEMI {: RESULT=new StatementBreak(); :}
            |
            (StatementContinue) CONTINUE SEMI {: RESULT=new StatementContinue(); :}
            |
            (StatementReturn) RETURN ExprSingle:E1 SEMI {: RESULT=new StatementReturn(E1); RESULT.setLine(E1left); :}
            |
            (StatementRead) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new StatementRead(D1); RESULT.setLine(D1left); :}
            |
            (StatementPrint) PRINT LPAREN Expr:E1 CommaNumConstSingle:C2 RPAREN SEMI {: RESULT=new StatementPrint(E1, C2); RESULT.setLine(E1left); :}
            |
            (StatementStatementList) LBRACE StatementList:S1 RBRACE {: RESULT=new StatementStatementList(S1); RESULT.setLine(S1left); :};

ForConditionSingle ::= (ForConditionSingleNode) ConditionSingle:C1 SEMI {: RESULT=new ForConditionSingleNode(C1); RESULT.setLine(C1left); :}
                        |
                        (ErrorForConditionSingleNode) error SEMI:l
                        {: parser.report_error("Izvrsen oporavak u liniji "+lleft,null); :} {: RESULT=new ErrorForConditionSingleNode(); :};

ConditionSingle ::= (ConditionSingleNode) Condition:C1 {: RESULT=new ConditionSingleNode(C1); RESULT.setLine(C1left); :}
                    |
                    (NoConditionSingle) {: RESULT=new NoConditionSingle(); :} /* epsilon */;

StatementList ::= (StatementListNode) StatementList:S1 Statement:S2 {: RESULT=new StatementListNode(S1, S2); RESULT.setLine(S1left); :}
                    |
                    (NoStatementList) {: RESULT=new NoStatementList(); :} /* epsilon */;

CommaNumConstSingle ::= (CommaNumConstSingleNode) COMMA NUMBER:N1 {: RESULT=new CommaNumConstSingleNode(N1); RESULT.setLine(N1left); :}
                        |
                        (NoCommaNumConstSingle) {: RESULT=new NoCommaNumConstSingle(); :} /* epsilon */;

ExprSingle ::= (ExprSingleNode) Expr:E1 {: RESULT=new ExprSingleNode(E1); RESULT.setLine(E1left); :}
                |
                (NoExprSingle) {: RESULT=new NoExprSingle(); :} /* epsilon */;

ElseStatementSingle ::= (ElseStatementSingleNode) ELSE Statement:S1 {: RESULT=new ElseStatementSingleNode(S1); RESULT.setLine(S1left); :}
                        |
                        (NoElseStatementSingle) {: RESULT=new NoElseStatementSingle(); :} /* epsilon */;

DesignatorStatementSingle ::= (DesignatorStatementSingleNode) DesignatorStatement:D1 {: RESULT=new DesignatorStatementSingleNode(D1); RESULT.setLine(D1left); :}
                            |
                            (NoDesignatorStatementSingle) {: RESULT=new NoDesignatorStatementSingle(); :} /* epsilon */;

DesignatorStatement ::= (DesignatorStatementFunc) Designator:D1 LPAREN ActParsSingle:A2 RPAREN {: RESULT=new DesignatorStatementFunc(D1, A2); RESULT.setLine(D1left); :}
                        |
                        (DesignatorStatementInc) Designator:D1 INC {: RESULT=new DesignatorStatementInc(D1); RESULT.setLine(D1left); :}
                        |
                        (DesignatorStatementDec) Designator:D1 DEC {: RESULT=new DesignatorStatementDec(D1); RESULT.setLine(D1left); :}
                        |
                        (DesignatorStatementAssignNode) DesignatorAssignItem:D1 {: RESULT=new DesignatorStatementAssignNode(D1); RESULT.setLine(D1left); :};

DesignatorAssignItem ::= (DesignatorAssignItemNode) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorAssignItemNode(D1, A2, E3); RESULT.setLine(D1left); :}
                        |
                        (ErrorDesignatorAssignItem) error:l
                        {: parser.report_error("Izvrsen oporavak u liniji "+lleft,null); :} {: RESULT=new ErrorDesignatorAssignItem(); :};

ActPars ::= (ActPars) Expr:E1 ActParsList:A2 {: RESULT=new ActPars(E1, A2); RESULT.setLine(E1left); :};

ActParsList ::= (ActParsListNode) ActParsList:A1 COMMA Expr:E2 {: RESULT=new ActParsListNode(A1, E2); RESULT.setLine(A1left); :}
                |
                (NoActParsList) {: RESULT=new NoActParsList(); :} /* epsilon */;

Condition ::= (Condition) CondTerm:C1 ConditionList:C2 {: RESULT=new Condition(C1, C2); RESULT.setLine(C1left); :};

ConditionList ::= (ConditionListNode) ConditionList:C1 OR CondTerm:C2 {: RESULT=new ConditionListNode(C1, C2); RESULT.setLine(C1left); :}
                |
                (NoConditionList) {: RESULT=new NoConditionList(); :} /* epsilon */;

CondTerm ::= (CondTerm) CondFact:C1 CondTermList:C2 {: RESULT=new CondTerm(C1, C2); RESULT.setLine(C1left); :};

CondTermList ::= (CondTermListNode) CondTermList:C1 CondTermItem:C2 {: RESULT=new CondTermListNode(C1, C2); RESULT.setLine(C1left); :}
                |
                (NoCondTermList) {: RESULT=new NoCondTermList(); :} /* epsilon */;

CondTermItem ::= (CondTermItem) AND CondFact:C1 {: RESULT=new CondTermItem(C1); RESULT.setLine(C1left); :};

CondFact ::= (CondFactExpr) Expr:E1 {: RESULT=new CondFactExpr(E1); RESULT.setLine(E1left); :}
            |
            (CondFactRelop) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactRelop(E1, R2, E3); RESULT.setLine(E1left); :};

Expr ::= (ExprTerm) SubSingle:S1 Term:T2 {: RESULT=new ExprTerm(S1, T2); RESULT.setLine(S1left); :}
        |
        (ExprAdd) Expr:E1 Addop:A2 Term:T3 {: RESULT=new ExprAdd(E1, A2, T3); RESULT.setLine(E1left); :};

SubSingle ::= (SubSingleNode) SUB {: RESULT=new SubSingleNode(); :}
            |
            (NoSubSingle) {: RESULT=new NoSubSingle(); :} /* epsilon */;

Term ::= (TermFactor) Factor:F1 {: RESULT=new TermFactor(F1); RESULT.setLine(F1left); :}
        |
        (TermMul) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new TermMul(T1, M2, F3); RESULT.setLine(T1left); :};

Factor ::= (FactorVariable) Designator:D1 {: RESULT=new FactorVariable(D1); RESULT.setLine(D1left); :}
            |
            (FactorFuncCall) Designator:D1 LPAREN ActParsSingle:A2 RPAREN {: RESULT=new FactorFuncCall(D1, A2); RESULT.setLine(D1left); :}
            |
            (FactorConstant) ConstLiteral:C1 {: RESULT=new FactorConstant(C1); RESULT.setLine(C1left); :}
            |
            (FactorNewArray) NEW Type:T1 LSQUARE Expr:E2 RSQUARE {: RESULT=new FactorNewArray(T1, E2); RESULT.setLine(T1left); :}
            |
            (FactorNewClass) NEW Type:T1 {: RESULT=new FactorNewClass(T1); RESULT.setLine(T1left); :}
            |
            (FactorExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :};

ActParsSingle ::= (ActParsSingleNode) ActPars:A1 {: RESULT=new ActParsSingleNode(A1); RESULT.setLine(A1left); :}
            |
            (NoActParsSingle) {: RESULT=new NoActParsSingle(); :} /* epsilon */;

Designator ::= (DesignatorIdent) IDENT:name {: RESULT=new DesignatorIdent(name); RESULT.setLine(nameleft); :}
                |
                (DesignatorDot) Designator:D1 DOT IDENT:classMember {: RESULT=new DesignatorDot(D1, classMember); RESULT.setLine(D1left); :}
                |
                (DesignatorArray) Designator:D1 LSQUARE Expr:E2 RSQUARE {: RESULT=new DesignatorArray(D1, E2); RESULT.setLine(D1left); :};


Assignop ::= (Assignop) ASSIGN {: RESULT=new Assignop(); :};

Relop ::= (Equalop) EQ {: RESULT=new Equalop(); :}
        |
        (NotEqualop) NEQ {: RESULT=new NotEqualop(); :}
        |
        (Greaterop) GE {: RESULT=new Greaterop(); :}
        |
        (GreaterEqualop) GEQ {: RESULT=new GreaterEqualop(); :}
        |
        (Lesserop) LE {: RESULT=new Lesserop(); :}
        |
        (LesserEqualop) LEQ {: RESULT=new LesserEqualop(); :};

Addop ::= (Addop) PLUS {: RESULT=new Addop(); :}
        |
        (Subop) SUB {: RESULT=new Subop(); :};

Mulop ::= (Mulop) MUL {: RESULT=new Mulop(); :}
        |
        (Divop) DIV {: RESULT=new Divop(); :}
        |
        (Modop) MOD {: RESULT=new Modop(); :};
